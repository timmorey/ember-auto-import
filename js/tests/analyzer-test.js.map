{"version":3,"file":"analyzer-test.js","sourceRoot":"","sources":["../../ts/tests/analyzer-test.ts"],"names":[],"mappings":"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","sourcesContent":["import QUnit from 'qunit';\nimport 'qunit-assertions-extra';\nimport broccoli, { Builder } from 'broccoli';\nimport { UnwatchedDir } from 'broccoli-source';\nimport quickTemp from 'quick-temp';\nimport { ensureDirSync, readFileSync, outputFileSync, removeSync, existsSync } from 'fs-extra';\nimport { join } from 'path';\nimport type Package from '../package';\nimport Analyzer from '../analyzer';\n// @ts-ignore\nimport broccoliBabel from 'broccoli-babel-transpiler';\nimport type { TransformOptions } from '@babel/core';\nimport { deserialize, ImportSyntax, serialize, MARKER } from '../analyzer-syntax';\nimport { ReadStream } from 'fs';\n\nconst { module: Qmodule, test } = QUnit;\n\nQmodule('analyzer', function (hooks) {\n  let builder: Builder;\n  let upstream: string;\n  let analyzer: Analyzer;\n  let pack: Package;\n  let babelConfig: TransformOptions;\n\n  hooks.beforeEach(function (this: any) {\n    quickTemp.makeOrRemake(this, 'workDir', 'auto-import-analyzer-tests');\n    ensureDirSync((upstream = join(this.workDir, 'upstream')));\n    pack = {\n      fileExtensions: ['js'],\n    } as Package;\n    babelConfig = {\n      plugins: [\n        require.resolve('../../js/analyzer-plugin'),\n        require.resolve('@babel/plugin-syntax-typescript'),\n\n        // keeping this in non-parallelizable form prevents\n        // broccoli-babel-transpiler from spinning up separate worker processes,\n        // which we don't want or need and which hang at the end of the test\n        // suite.\n        require('../../babel-plugin'),\n      ],\n    };\n    let transpiled = broccoliBabel(new UnwatchedDir(upstream), babelConfig);\n    analyzer = new Analyzer(transpiled, pack, undefined, true);\n    builder = new broccoli.Builder(analyzer);\n  });\n\n  hooks.afterEach(function (this: any) {\n    removeSync(this.workDir);\n    if (builder) {\n      return builder.cleanup();\n    }\n  });\n\n  test('initial file passes through', async function (assert) {\n    let original = \"import 'some-package';\";\n    outputFileSync(join(upstream, 'sample.js'), original);\n    await builder.build();\n    let content = readFileSync(join(builder.outputPath, 'sample.js'), 'utf8');\n    assert.ok(content.endsWith(original), `${content} should end with ${original}`);\n  });\n\n  test('created file passes through', async function (assert) {\n    await builder.build();\n    let original = \"import 'some-package';\";\n    outputFileSync(join(upstream, 'sample.js'), original);\n    await builder.build();\n    let content = readFileSync(join(builder.outputPath, 'sample.js'), 'utf8');\n    assert.ok(content.endsWith(original), `${content} should end with ${original}`);\n  });\n\n  test('updated file passes through', async function (assert) {\n    let original = \"import 'some-package';\";\n    outputFileSync(join(upstream, 'sample.js'), original);\n    await builder.build();\n\n    let updated = \"import 'some-package';\\nimport 'other-package';\";\n    outputFileSync(join(upstream, 'sample.js'), updated);\n    await builder.build();\n\n    let content = readFileSync(join(builder.outputPath, 'sample.js'), 'utf8');\n    assert.ok(content.endsWith(updated), `${content} should end with ${updated}`);\n  });\n\n  test('deleted file passes through', async function (assert) {\n    let original = \"import 'some-package';\";\n    outputFileSync(join(upstream, 'sample.js'), original);\n    await builder.build();\n\n    removeSync(join(upstream, 'sample.js'));\n    await builder.build();\n\n    assert.ok(!existsSync(join(builder.outputPath, 'sample.js')), 'should not exist');\n  });\n\n  test('imports discovered in created file', async function (assert) {\n    await builder.build();\n    let original = \"import 'some-package';\";\n    outputFileSync(join(upstream, 'sample.js'), original);\n    await builder.build();\n    assert.deepEqual(analyzer.imports, [\n      {\n        isDynamic: false,\n        specifier: 'some-package',\n        path: 'sample.js',\n        package: pack,\n        treeType: undefined,\n      },\n    ]);\n  });\n\n  test('imports remain constant in updated file', async function (assert) {\n    let original = \"import 'some-package';\";\n    outputFileSync(join(upstream, 'sample.js'), original);\n    await builder.build();\n\n    let updated = \"import 'some-package';\\nconsole.log('hi');\";\n    outputFileSync(join(upstream, 'sample.js'), updated);\n    await builder.build();\n\n    assert.deepEqual(analyzer.imports, [\n      {\n        isDynamic: false,\n        specifier: 'some-package',\n        path: 'sample.js',\n        package: pack,\n        treeType: undefined,\n      },\n    ]);\n  });\n\n  test('import added in updated file', async function (assert) {\n    let original = \"import 'some-package';\";\n    outputFileSync(join(upstream, 'sample.js'), original);\n    await builder.build();\n\n    let updated = \"import 'some-package';\\nimport 'other-package';\";\n    outputFileSync(join(upstream, 'sample.js'), updated);\n    await builder.build();\n\n    assert.deepEqual(analyzer.imports, [\n      {\n        isDynamic: false,\n        specifier: 'some-package',\n        path: 'sample.js',\n        package: pack,\n        treeType: undefined,\n      },\n      {\n        isDynamic: false,\n        specifier: 'other-package',\n        path: 'sample.js',\n        package: pack,\n        treeType: undefined,\n      },\n    ]);\n  });\n\n  test('import removed in updated file', async function (assert) {\n    let original = \"import 'some-package';\";\n    outputFileSync(join(upstream, 'sample.js'), original);\n    await builder.build();\n\n    let updated = \"console.log('x');\";\n    outputFileSync(join(upstream, 'sample.js'), updated);\n    await builder.build();\n\n    assert.deepEqual(analyzer.imports, []);\n  });\n\n  test('import removed when file deleted', async function (assert) {\n    let original = \"import 'some-package';\";\n    outputFileSync(join(upstream, 'sample.js'), original);\n    await builder.build();\n\n    removeSync(join(upstream, 'sample.js'));\n    await builder.build();\n\n    assert.deepEqual(analyzer.imports, []);\n  });\n\n  test('type-only imports ignored in created file', async function (assert) {\n    await builder.build();\n    let original = `\n      import type Foo from 'type-import';\n      import Bar from 'value-import';\n\n      export type { Qux } from 'type-re-export';\n      export { Baz } from 'value-re-export';\n    `;\n    outputFileSync(join(upstream, 'sample.js'), original);\n    await builder.build();\n    assert.deepEqual(analyzer.imports, [\n      {\n        isDynamic: false,\n        specifier: 'value-import',\n        path: 'sample.js',\n        package: pack,\n        treeType: undefined,\n      },\n      {\n        isDynamic: false,\n        specifier: 'value-re-export',\n        path: 'sample.js',\n        package: pack,\n        treeType: undefined,\n      },\n    ]);\n  });\n\n  test('dependency discovered from reexport', async function (assert) {\n    babelConfig.plugins!.push(\n      // this is here because Ember does this and we want to make sure we\n      // coexist with it\n      [require.resolve('@babel/plugin-transform-modules-amd'), { noInterop: true }]\n    );\n    let original = \"export { default } from 'some-package';\";\n    outputFileSync(join(upstream, 'sample.js'), original);\n    await builder.build();\n    assert.deepEqual(analyzer.imports, [\n      {\n        isDynamic: false,\n        specifier: 'some-package',\n        path: 'sample.js',\n        package: pack,\n        treeType: undefined,\n      },\n    ]);\n  });\n\n  test('dependency discovered from namespace reexport', async function (assert) {\n    let original = \"export * from 'some-package';\";\n    outputFileSync(join(upstream, 'sample.js'), original);\n    await builder.build();\n    assert.deepEqual(analyzer.imports, [\n      {\n        isDynamic: false,\n        specifier: 'some-package',\n        path: 'sample.js',\n        package: pack,\n        treeType: undefined,\n      },\n    ]);\n  });\n\n  type LiteralExample = [string, string];\n  type TemplateExample = [string, string[], string[]];\n  function isLiteralExample(exp: LiteralExample | TemplateExample): exp is LiteralExample {\n    return exp.length === 2;\n  }\n\n  let legalDynamicExamples: (LiteralExample | TemplateExample)[] = [\n    [\"import('alpha');\", 'alpha'],\n    [\"import('@beta/thing');\", '@beta/thing'],\n    ['import(`gamma`);', 'gamma'],\n    ['import(`@delta/thing`);', '@delta/thing'],\n    [\"import('epsilon/mod');\", 'epsilon/mod'],\n    [\"import('@zeta/thing/mod');\", '@zeta/thing/mod'],\n    ['import(`eta/mod`);', 'eta/mod'],\n    ['import(`@theta/thing/mod`);', '@theta/thing/mod'],\n    [\"import('http://example.com');\", 'http://example.com'],\n    [\"import('https://example.com');\", 'https://example.com'],\n    [\"import('//example.com');\", '//example.com'],\n    ['import(`http://example.com`);', 'http://example.com'],\n    ['import(`https://example.com`);', 'https://example.com'],\n    [\n      'import(`data:application/javascript;base64,ZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7IHJldHVybiAxIH0=`);',\n      'data:application/javascript;base64,ZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7IHJldHVybiAxIH0=',\n    ],\n    ['import(`//example.com`);', '//example.com'],\n    ['import(`http://example.com`);', 'http://example.com'],\n    ['import(`https://example.com`);', 'https://example.com'],\n    ['import(`//example.com`);', '//example.com'],\n    ['import(`http://${domain}`);', ['http://', ''], ['domain']],\n    ['import(`https://example.com/${path}`);', ['https://example.com/', ''], ['path']],\n    ['import(`data:application/javascript;base64,${code}`);', ['data:application/javascript;base64,', ''], ['code']],\n    ['import(`//${domain}`);', ['//', ''], ['domain']],\n    ['import(`alpha/${foo}`);', ['alpha/', ''], ['foo']],\n    ['import(`@beta/thing/${foo}`);', ['@beta/thing/', ''], ['foo']],\n    ['import(`alpha/${foo}/component`);', ['alpha/', '/component'], ['foo']],\n    ['import(`@beta/thing/${foo}/component`);', ['@beta/thing/', '/component'], ['foo']],\n    ['import(`alpha/${foo}/component/${bar}`);', ['alpha/', '/component/', ''], ['foo', 'bar']],\n    ['import(`@beta/thing/${foo}/component/${bar}`);', ['@beta/thing/', '/component/', ''], ['foo', 'bar']],\n  ];\n\n  for (let example of legalDynamicExamples) {\n    let [src] = example;\n    test(`dynamic import example: ${src}`, async function (assert) {\n      outputFileSync(join(upstream, 'sample.js'), src);\n      await builder.build();\n      if (isLiteralExample(example)) {\n        assert.deepEqual(analyzer.imports, [\n          {\n            isDynamic: true,\n            specifier: example[1],\n            path: 'sample.js',\n            package: pack,\n            treeType: undefined,\n          },\n        ]);\n      } else {\n        assert.deepEqual(analyzer.imports, [\n          {\n            isDynamic: true,\n            cookedQuasis: example[1],\n            expressionNameHints: example[2],\n            path: 'sample.js',\n            package: pack,\n            treeType: undefined,\n          },\n        ]);\n      }\n    });\n  }\n\n  let legalImportSyncExamples: (LiteralExample | TemplateExample)[] = [\n    [\"importSync('alpha');\", 'alpha'],\n    [\"importSync('@beta/thing');\", '@beta/thing'],\n    ['importSync(`gamma`);', 'gamma'],\n    ['importSync(`@delta/thing`);', '@delta/thing'],\n    [\"importSync('epsilon/mod');\", 'epsilon/mod'],\n    [\"importSync('@zeta/thing/mod');\", '@zeta/thing/mod'],\n    ['importSync(`eta/mod`);', 'eta/mod'],\n    ['importSync(`@theta/thing/mod`);', '@theta/thing/mod'],\n    ['importSync(`alpha/${foo}`);', ['alpha/', ''], ['foo']],\n    ['importSync(`@beta/thing/${foo}`);', ['@beta/thing/', ''], ['foo']],\n    ['importSync(`alpha/${foo}/component`);', ['alpha/', '/component'], ['foo']],\n    ['importSync(`@beta/thing/${foo}/component`);', ['@beta/thing/', '/component'], ['foo']],\n    ['importSync(`alpha/${foo}/component/${bar}`);', ['alpha/', '/component/', ''], ['foo', 'bar']],\n    ['importSync(`@beta/thing/${foo}/component/${bar}`);', ['@beta/thing/', '/component/', ''], ['foo', 'bar']],\n  ];\n\n  for (let example of legalImportSyncExamples) {\n    let [src] = example;\n    test(`importSync example: ${src}`, async function (assert) {\n      outputFileSync(join(upstream, 'sample.js'), `import { importSync } from '@embroider/macros'; ${src}`);\n      await builder.build();\n      if (isLiteralExample(example)) {\n        assert.deepEqual(analyzer.imports, [\n          {\n            isDynamic: false,\n            specifier: '@embroider/macros',\n            path: 'sample.js',\n            package: pack,\n            treeType: undefined,\n          },\n          {\n            isDynamic: false,\n            specifier: example[1],\n            path: 'sample.js',\n            package: pack,\n            treeType: undefined,\n          },\n        ]);\n      } else {\n        assert.deepEqual(analyzer.imports, [\n          {\n            isDynamic: false,\n            specifier: '@embroider/macros',\n            path: 'sample.js',\n            package: pack,\n            treeType: undefined,\n          },\n          {\n            isDynamic: false,\n            cookedQuasis: example[1],\n            expressionNameHints: example[2],\n            path: 'sample.js',\n            package: pack,\n            treeType: undefined,\n          },\n        ]);\n      }\n    });\n  }\n\n  test('disallowed patttern: unsupported syntax', async function (assert) {\n    assert.expect(1);\n    let src = `\n    function x() {\n      import((function(){ return 'hi' })());\n    }\n    `;\n    outputFileSync(join(upstream, 'sample.js'), src);\n    try {\n      await builder.build();\n      throw new Error(`expected not to get here, build was supposed to fail`);\n    } catch (err) {\n      assert.contains(err.message, 'import() is only allowed to contain string literals or template string literals');\n    }\n  });\n});\n\nQmodule('analyzer-deserialize', function () {\n  function sampleData(): ImportSyntax[] {\n    return [\n      {\n        isDynamic: false,\n        specifier: 'alpha',\n      },\n      {\n        isDynamic: true,\n        specifier: 'beta',\n      },\n      {\n        isDynamic: false,\n        cookedQuasis: ['gamma/', ''],\n        expressionNameHints: [null],\n      },\n      {\n        isDynamic: true,\n        cookedQuasis: ['delta/', ''],\n        expressionNameHints: ['flavor'],\n      },\n    ];\n  }\n\n  function source(chunks: string[]): ReadStream {\n    let closer: undefined | (() => void);\n    return {\n      get chunksRemaining() {\n        return chunks.length;\n      },\n\n      read() {\n        if (chunks.length > 0) {\n          return chunks.shift();\n        } else {\n          if (closer) {\n            closer();\n          }\n          return null;\n        }\n      },\n      on(event: string, handler: () => unknown) {\n        if (event === 'readable') {\n          setTimeout(handler, 0);\n        }\n        if (event === 'close') {\n          closer = handler;\n        }\n      },\n      destroy() {\n        if (closer) {\n          closer();\n        }\n      },\n    } as unknown as ReadStream;\n  }\n\n  test('no meta found', async function (assert) {\n    let result = await deserialize(source(['abcdefgabcdefg']));\n    assert.deepEqual(result, []);\n  });\n\n  test('meta found in one chunk', async function (assert) {\n    let result = await deserialize(source(['stuff stuff stuff ' + serialize(sampleData())]));\n    assert.deepEqual(result, sampleData());\n  });\n\n  test('meta spans two chunks', async function (assert) {\n    let meta = serialize(sampleData());\n    let result = await deserialize(\n      source([`stuff stuff stuff ${meta.slice(0, MARKER.length + 2)}`, meta.slice(MARKER.length + 2)])\n    );\n    assert.deepEqual(result, sampleData());\n  });\n\n  test('meta spans three chunks', async function (assert) {\n    let meta = serialize(sampleData());\n    let result = await deserialize(\n      source([\n        `stuff stuff stuff ${meta.slice(0, MARKER.length + 2)}`,\n        meta.slice(MARKER.length + 2, MARKER.length + 5),\n        meta.slice(MARKER.length + 5),\n      ])\n    );\n    assert.deepEqual(result, sampleData());\n  });\n\n  test('leaves remaining chunks unconsumed after finding meta', async function (assert) {\n    let s = source([`stuff stuff stuff ${serialize(sampleData())} other stuff`, 'extra']);\n    let result = await deserialize(s);\n    assert.deepEqual(result, sampleData());\n    assert.equal((s as any).chunksRemaining, 1);\n  });\n\n  test('start marker split between chunks', async function (assert) {\n    let meta = serialize(sampleData());\n    let result = await deserialize(source([`stuff stuff stuff ${meta.slice(0, 2)}`, meta.slice(2)]));\n    assert.deepEqual(result, sampleData());\n  });\n\n  test('false start marker at end of chunk', async function (assert) {\n    let meta = serialize(sampleData());\n    let result = await deserialize(source([`stuff stuff stuff ${meta.slice(0, 2)}`, `other${meta}`]));\n    assert.deepEqual(result, sampleData());\n  });\n\n  test('end marker split between chunks', async function (assert) {\n    let meta = serialize(sampleData());\n    let result = await deserialize(source([`stuff stuff stuff ${meta.slice(0, -2)}`, meta.slice(-2)]));\n    assert.deepEqual(result, sampleData());\n  });\n\n  test('false end marker at end of chunk', async function (assert) {\n    const meta = serialize(sampleData());\n    assert.ok(\n      meta.slice(MARKER.length, -MARKER.length).indexOf(MARKER[0]) > -1,\n      'serialized sample data must contain first character of MARKER somewhere between boundary markers for test to have meaning'\n    );\n    const slicePos = meta.slice(MARKER.length, -MARKER.length).indexOf(MARKER[0]) + MARKER.length + 1;\n    const result = await deserialize(\n      source([`stuff stuff stuff ${meta.slice(0, slicePos)}`, `${meta.slice(slicePos)} stuff stuff`])\n    );\n    assert.deepEqual(result, sampleData());\n  });\n});\n"]}